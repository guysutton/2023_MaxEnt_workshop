# Load required packages
if (!require("pacman"))
install.packages("pacman")
pacman::p_load(
tidyverse,
dismo,
raster,
here,
corrplot,
Hmisc,
patchwork,
ecospat,
# kuenm,
gridSVG,
gridExtra,
grid,
ENMeval,
spThin,
viridis,
viridisLite,
mapdata,
maptools,
scales,
geosphere,
rgdal,
ggtext,
rJava,
rgeos,
sp,
sf,
ggspatial,
ecospat,
rnaturalearth,
rnaturalearthdata,
megaSDM,
InformationValue,
caret
)
?getData
pacman::p_load(
tidyverse,
dismo,
raster,
here,
corrplot,
Hmisc,
patchwork,
ecospat,
# kuenm,
gridSVG,
gridExtra,
grid,
ENMeval,
spThin,
viridis,
viridisLite,
mapdata,
maptools,
scales,
geosphere,
rgdal,
ggtext,
rJava,
rgeos,
sp,
sf,
ggspatial,
ecospat,
rnaturalearth,
rnaturalearthdata,
# megaSDM,
InformationValue,
caret,
terra
)
# Download the WORLDCLIM raster layers for current time period
wc_current <- raster::getData(
name = "worldclim",
var = 'bio',
res = 2.5,          # Resolution of the raster layers (2.5 arc minutes)
download = TRUE,
# Set the file path to the folder where the raster layers should be
# stored and/or loaded from if already downloaded
path = here::here("./data/environmental_layers/current/")
)
pacman::p_load(
tidyverse,
dismo,
raster,
here,
corrplot,
Hmisc,
patchwork,
ecospat,
# kuenm,
gridSVG,
gridExtra,
grid,
ENMeval,
spThin,
viridis,
viridisLite,
mapdata,
maptools,
scales,
geosphere,
rgdal,
ggtext,
rJava,
rgeos,
sp,
sf,
ggspatial,
ecospat,
rnaturalearth,
rnaturalearthdata,
# megaSDM,
InformationValue,
caret,
terra,
geodata
)
wc_current <- geodata::worldclim_global(
var = "bio",
res = 2.5,
path = here::here("./data/environmental_layers/current/"),
version = "2.1"
)
terra::plot(wc_current)
terra::plot(wc_current[1])
terra::plot(wc_current[1])
wc_current
wc_current[1]
plot(wc_current)
terra::plot(wc_current)
# Set the CRS projection for the current climate layers
# - Use the correct wkt CRS format - no more PROJ4 strings!
terra::crs(wc_current)
# Set the CRS projection for the current climate layers
# - Use the correct wkt CRS format - no more PROJ4 strings!
terra::crs(wc_current, describe = T)
# If they did not import in 'WGS84', or you want to reproject your
# climate layers into a different projection, this is how you do it.
terra::crs(wc_current) <- "epsg:4326"
terra::crs(wc_current, describe = T)
sp_gps <- geodata::sp_occurrence("solanum", "acaule", download=TRUE)
sp_gps
class(sp_gps)
plot(sp_gps)
plot(sp_gps)
sp_gps <- geodata::sp_occurrence(
genus = "Senecio",
species = "madagascariensis",
download = TRUE,
geo = TRUE,
removeZeros = TRUE
)
?sp_occurrence
# Download species occurrences (GPS)
set.seed(2012)
sp_gps <- geodata::sp_occurrence(
genus = "Senecio",
species = "madagascariensis",
download = TRUE,
geo = TRUE,
removeZeros = TRUE,
nrecs = 2000    # Only download 2000 GPS - remove this for a proper analysis
)
head(sp_gps)
# Get world map
world_map <- rnaturalearth::ne_countries(
scale = "medium",
returnclass = "sf"
)
# Plot GPS points on world map to check our locality data is correct
ggplot() +
# Add raster layer of world map
geom_sf(data = world_map) +
# Add GPS points
geom_point(
data = sp_gps,
aes(
x = lon,
y = lat
)
) +
# Set world map CRS
coord_sf(
crs = 4326,
expand = FALSE
)
ggplot() +
# Add raster layer of world map
geom_sf(data = world_map) +
# Add GPS points
geom_point(
data = sp_gps,
aes(
x = lon,
y = lat
)
)
ggplot() +
# Add raster layer of world map
geom_sf(data = world_map) +
# Add GPS points
geom_point(
data = sp_gps,
aes(
x = lon,
y = lat
)
)
# Change ggplot theme
theme_set(
theme_classic() +
theme(
panel.border = element_rect(colour = "black",
fill = NA),
axis.text = element_text(colour = "black"),
axis.title.x = element_text(margin = unit(c(2, 0, 0, 0),
"mm")),
axis.title.y = element_text(margin = unit(c(0, 4, 0, 0),
"mm")),
legend.position = "none"
)
)
# Set the theme for the maps
theme_opts <- list(
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_rect(fill = 'white', colour = NA),
plot.background = element_rect(),
axis.line = element_blank(),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"),
axis.ticks = element_line(colour = "black"),
axis.title.x = element_text(colour = "black"),
axis.title.y = element_text(colour = "black"),
plot.title = element_text(colour = "black"),
panel.border = element_rect(fill = NA),
legend.key = element_blank()
)
)
# Plot GPS points on world map to check our locality data is correct
ggplot() +
# Add raster layer of world map
geom_sf(data = world_map) +
# Add GPS points
geom_point(
data = sp_gps,
aes(
x = lon,
y = lat
)
)
# Plot GPS points on world map to check our locality data is correct
ggplot() +
# Add raster layer of world map
geom_sf(data = world_map) +
# Add GPS points
geom_point(
data = sp_gps,
aes(
x = lon,
y = lat
)
)  +
# Set world map CRS
coord_sf(
crs = 4326,
expand = FALSE
)
# Let's just keep the columns of data that we will use going forward
sp_data <- sp_gps %>%
dplyr::select(
species,
lon,
lat,
country
)
head(sp_data)
class(sp_data)
# Plot GPS points on world map to check our locality data is correct
ggplot() +
# Add raster layer of world map
geom_sf(data = world_map) +
# Add GPS points
geom_point(
data = sp_data,
aes(
x = lon,
y = lat
)
)  +
# Set world map CRS
coord_sf(
crs = 4326,
expand = FALSE
)
sp_africa <- sp_data %>%
dplyr::filter(
country %in% c("South Africa", "Madagascar")
)
# Replot the GPS points on world map to that we kept the right GPS data
ggplot() +
# Add raster layer of world map
geom_sf(data = world_map) +
# Add GPS points
geom_point(
data = sp_africa,
aes(
x = lon,
y = lat
)
)  +
# Set world map CRS
coord_sf(
crs = 4326,
expand = FALSE
)
write_csv(x = sp_gps, "./data/gps/senecio_madagascariensis_world.csv")
# Alternatively, we could import a csv file containing GPS data
sp_gps <- readr::read_csv("./data/gps/senecio_madagascariensis_world.csv")
head(sp_gps)
# Let's just keep the columns of data that we will use going forward
sp_data <- sp_gps %>%
dplyr::select(
species,
lon,
lat,
country
)
head(sp_data)
# Plot GPS points on world map to check our locality data is correct
ggplot() +
# Add raster layer of world map
geom_sf(data = world_map) +
# Add GPS points
geom_point(
data = sp_data,
aes(
x = lon,
y = lat
)
)  +
# Set world map CRS
coord_sf(
crs = 4326,
expand = FALSE
)
# Let's just keep the GPS records from South Africa and Madagascar to build
# our climate model
sp_africa <- sp_data %>%
dplyr::filter(
country %in% c("South Africa", "Madagascar")
)
# Replot the GPS points on world map to that we kept the right GPS data
ggplot() +
# Add raster layer of world map
geom_sf(data = world_map) +
# Add GPS points
geom_point(
data = sp_africa,
aes(
x = lon,
y = lat
)
)  +
# Set world map CRS
coord_sf(
crs = 4326,
expand = FALSE
)
# Replot the GPS points on world map to that we kept the right GPS data
ggplot() +
# Add raster layer of world map
geom_sf(data = world_map) +
# Add GPS points
geom_point(
data = sp_africa,
aes(
x = lon,
y = lat
)
)  +
# Set world map CRS
coord_sf(
crs = 4326,
expand = FALSE
)
